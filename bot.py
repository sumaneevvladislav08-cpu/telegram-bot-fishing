import random
import datetime
import os
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import FSInputFile, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.client.default import DefaultBotProperties

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–ø–æ–ª—É—á–µ–Ω –æ—Ç @BotFather)
BOT_TOKEN = "8310809355:AAHu_5LR5Sbty_hIs3d2wvmX99Wl9oHV2RQ"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–≤–æ–π—Å—Ç–≤ –±–æ—Ç–∞
default = DefaultBotProperties(parse_mode=ParseMode.HTML)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN, default=default)
dp = Dispatcher()

# –ü–∞–ø–∫–∞ —Å –ø—Ä–∏–º–∞–Ω–∫–∞–º–∏
BAITS_FOLDER = "baits"

# –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É "HACK"
def get_hack_button():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="HACK", callback_data="hack_instruction")]
    ])
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    welcome_text = "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É HACK, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é."
    await message.reply(welcome_text, reply_markup=get_hack_button())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–≤–∫–ª—é—á–∞—è –≤—Ä–µ–º—è –∏ —Å—Å—ã–ª–∫—É)
@dp.message()
async def handle_message(message: types.Message):
    if message.text is None:
        print("–ü–æ–ª—É—á–µ–Ω–æ –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏–≥–Ω–æ—Ä–∏—Ä—É—é.")
        return

    print(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text}")
    text = message.text.strip().split(maxsplit=1)
    print(f"–†–∞–∑–¥–µ–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text}")
    if len(text) >= 2:
        time_str = text[0]
        print(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –≤—Ä–µ–º—è: {time_str}")
        try:
            user_time = datetime.datetime.strptime(time_str, "%H:%M")
            print("–§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –≤–µ—Ä–Ω—ã–π")
            new_time = (user_time + datetime.timedelta(minutes=1)).strftime("%H:%M")

            baits = [f for f in os.listdir(BAITS_FOLDER) if f.lower().endswith((".png", ".jpg"))]
            print(f"–ù–∞–π–¥–µ–Ω–æ –ø—Ä–∏–º–∞–Ω–æ–∫: {len(baits)}")
            if not baits:
                await message.reply("–ù–µ—Ç –ø—Ä–∏–º–∞–Ω–æ–∫ –≤ –ø–∞–ø–∫–µ!")
                return

            bait_file = random.choice(baits)
            bait_path = os.path.join(BAITS_FOLDER, bait_file)
            print(f"–ü—É—Ç—å –∫ –ø—Ä–∏–º–∞–Ω–∫–µ: {bait_path}")
            try:
                photo = FSInputFile(bait_path)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º FSInputFile –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                print(f"–§–∞–π–ª {bait_file} –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
                caption = f"‚è∞ –í—Ä–µ–º—è: {new_time}\nüé£ –ü—Ä–∏–º–∞–Ω–∫–∞: {bait_file.replace('.jpg', '').replace('.png', '')}"
                await message.reply_photo(photo, caption=caption)
                print("–§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            except FileNotFoundError:
                print(f"–§–∞–π–ª {bait_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                await message.reply("–û—à–∏–±–∫–∞: —Ñ–∞–π–ª –ø—Ä–∏–º–∞–Ω–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–≤–µ—Ä—å –ø–∞–ø–∫—É baits/")
            except PermissionError:
                print(f"–ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ {bait_file}")
                await message.reply("–û—à–∏–±–∫–∞: –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º, –ø—Ä–æ–≤–µ—Ä—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.")
            except Exception as e:
                print(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")
                await message.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ, –ø—Ä–æ–≤–µ—Ä—å –ø–∞–ø–∫—É baits/")
                return
        except ValueError:
            print("–§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π")
            pass

    print("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –∫–∞–∫ –≤—Ä–µ–º—è+—Å—Å—ã–ª–∫–∞")
    await message.reply("–ü—Ä–∏—à–ª–∏ –≤—Ä–µ–º—è –∏ —Å—Å—ã–ª–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 12:34 https://example.com) –∏–ª–∏ –Ω–∞–∂–º–∏ HACK –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.", reply_markup=get_hack_button())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É HACK
@dp.callback_query(lambda c: c.data == "hack_instruction")
async def send_instruction(callback_query: types.CallbackQuery):
    instruction = (
        "üìú –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:\n"
        "1. –ó–∞–π–¥–∏ –≤ –∏–≥—Ä—É –∏ —Å–∫–æ–ø–∏—Ä—É–π —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–µ—ë.\n"
        "2. –°–∫–æ–ø–∏—Ä—É–π –≤—Ä–µ–º—è, –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É –∏–≥—Ä—ã (–≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM).\n"
        "3. –û—Ç–ø—Ä–∞–≤—å –±–æ—Ç—É —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: \"–≤—Ä–µ–º—è —Å—Å—ã–ª–∫–∞\" (–Ω–∞–ø—Ä–∏–º–µ—Ä, 12:34 https://example.com).\n"
        "4. –ë–æ—Ç –≤—ã–¥–∞—Å—Ç —Ç–µ–±–µ –ø—Ä–∏–º–∞–Ω–∫—É –∏ —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∏–≥—Ä—ã.\n"
        "–£–¥–∞—á–∏! üçÄ"
    )
    await callback_query.message.answer(instruction)
    await callback_query.answer()

if __name__ == "__main__":
    dp.run_polling(bot)